generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model user {
  id         String  @id(map: "user_PK") @db.VarChar(36)
  firstName  String  @db.VarChar(255)
  familyName String  @db.VarChar(255)
  email      String  @unique @db.VarChar(255)
  password   String  @db.VarChar(255)
  role       String  @db.VarChar(255)
  imageUrl   String? @db.VarChar(255)

  bands      band[]       @relation("UserBands")
  chats      chat[]       @relation("UserChats")
  invitation invitation[]
}

model offer {
  id          String  @id(map: "offer_PK") @db.VarChar(36)
  bandId      String  @unique @db.VarChar(36)
  price       Int
  description String? @db.VarChar(255)

  band band @relation(fields: [bandId], references: [id], map: "FK_Owner_Band", onDelete: Cascade)
}

model band {
  id       String  @id(map: "band_PK") @db.VarChar(36)
  name     String  @db.VarChar(255)
  genre    String  @db.VarChar(255)
  imageUrl String? @db.VarChar(255)

  offer      offer?
  members    user[]       @relation("UserBands")
  chats      chat[]       @relation("BandChats")
  invitation invitation[]
}

model message {
  id          String   @id(map: "message_PK") @db.VarChar(36)
  senderId    String   @db.VarChar(36)
  recipientId String   @db.VarChar(36)
  chatId      String   @db.VarChar(36)
  content     String
  timestamp   DateTime @default(now())
  isRead      Boolean

  chat chat @relation(fields: [chatId], references: [id])
}

model chat {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String   @db.VarChar(36)
  bandId    String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     user      @relation("UserChats", fields: [userId], references: [id], map: "FK_Chat_User", onDelete: NoAction, onUpdate: NoAction)
  band     band      @relation("BandChats", fields: [bandId], references: [id], map: "FK_Chat_Band", onDelete: NoAction, onUpdate: NoAction)
  messages message[]
}

model invitation {
  id        String   @id @default(uuid()) @db.VarChar(36)
  bandId    String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  status    String   @db.VarChar(50)
  createdAt DateTime @default(now())

  band band @relation(fields: [bandId], references: [id], map: "FK_Invitation_Band", onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], map: "FK_Invitation_User", onDelete: Cascade)
}
