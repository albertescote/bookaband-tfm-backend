generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         String   @id
  firstName  String
  familyName String
  email      String   @unique
  role       String
  password   String?
  imageUrl   String?
  bio        String?
  joinedDate DateTime @default(now())

  billingAddress    billingAddress?
  paymentMethods    paymentMethod[]
  refreshTokens     refreshToken[]
  bands             band[]             @relation("UserBands")
  chats             chat[]             @relation("UserChats")
  invitations       invitation[]
  bookings          booking[]
  emailVerification emailVerification?
}

model paymentMethod {
  id         String   @id @default(uuid())
  userId     String
  provider   String
  providerId String
  type       String
  brand      String?
  alias      String?
  lastFour   String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model billingAddress {
  id           String  @id @default(uuid())
  userId       String  @unique
  country      String
  city         String
  postalCode   String
  addressLine1 String
  addressLine2 String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refreshToken {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model offer {
  id           String   @id
  bandId       String   @unique
  price        Int
  description  String
  location     String
  featured     Boolean  @default(false)
  bandSize     String
  visible      Boolean  @default(true)
  eventTypeIds String[]

  band      band        @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bookings  booking[]
  equipment equipment[] @relation("OfferEquipment")
}

model band {
  id          String  @id
  name        String
  genre       String
  rating      Float   @default(0)
  reviewCount Int     @default(0)
  imageUrl    String?

  offer       offer?
  members     user[]       @relation("UserBands")
  chats       chat[]       @relation("BandChats")
  invitations invitation[]
}

model equipment {
  id      String @id @default(uuid())
  type    String
  offer   offer  @relation("OfferEquipment", fields: [offerId], references: [id])
  offerId String
}

model message {
  id          String   @id
  senderId    String
  recipientId String
  chatId      String
  content     String
  timestamp   DateTime @default(now())
  isRead      Boolean

  chat chat @relation(fields: [chatId], references: [id])
}

model chat {
  id        String   @id @default(uuid())
  userId    String
  bandId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     user      @relation("UserChats", fields: [userId], references: [id])
  band     band      @relation("BandChats", fields: [bandId], references: [id])
  messages message[]
}

model invitation {
  id        String   @id @default(uuid())
  bandId    String
  userId    String
  status    String
  createdAt DateTime @default(now())

  band band @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model booking {
  id        String   @id @default(uuid())
  offerId   String
  userId    String
  status    String
  date      DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  offer    offer     @relation(fields: [offerId], references: [id], onDelete: Cascade)
  user     user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract contract?
}

model contract {
  id        String   @id @default(uuid())
  bookingId String   @unique
  date      DateTime
  status    String
  createdAt DateTime @default(now())

  booking booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  invoice invoice?
}

model invoice {
  id         String   @id @default(uuid())
  contractId String   @unique
  date       DateTime
  amount     Float
  status     String
  createdAt  DateTime @default(now())

  contract contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model emailVerification {
  id              String   @id
  userId          String   @unique
  language        String
  verified        Boolean  @default(false)
  lastEmailSentAt DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}
