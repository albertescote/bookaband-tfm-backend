generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model user {
  id         String  @id(map: "user_PK") @db.VarChar(36)
  firstName  String  @db.VarChar(255)
  familyName String  @db.VarChar(255)
  email      String  @unique @db.VarChar(255)
  role       String  @db.VarChar(255)
  password   String? @db.VarChar(255)
  imageUrl   String? @db.VarChar(255)

  refreshTokens     refreshToken[]
  bands             band[]             @relation("UserBands")
  chats             chat[]             @relation("UserChats")
  invitations       invitation[]
  bookings          booking[]
  emailVerification emailVerification?
}

model refreshToken {
  id        String   @id(map: "refresToken_PK") @db.VarChar(36)
  token     String   @unique
  userId    String   @db.VarChar(36)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model offer {
  id          String  @id(map: "offer_PK") @db.VarChar(36)
  bandId      String  @unique @db.VarChar(36)
  price       Int
  description String? @db.VarChar(255)
  visible     Boolean @default(true)

  band     band      @relation(fields: [bandId], references: [id], map: "FK_Owner_Band", onDelete: Cascade)
  bookings booking[]
}

model band {
  id       String  @id(map: "band_PK") @db.VarChar(36)
  name     String  @db.VarChar(255)
  genre    String  @db.VarChar(255)
  imageUrl String? @db.VarChar(255)
  location String? @db.VarChar(255)

  rating      Float   @default(0)
  reviewCount Int     @default(0)
  featured    Boolean @default(false)
  bandSize    String  @db.VarChar(255)

  offer       offer?
  members     user[]       @relation("UserBands")
  chats       chat[]       @relation("BandChats")
  invitations invitation[]

  equipment       equipment[] @relation("BandEquipment")
  availableEvents eventType[] @relation("BandEvents")
}

model eventType {
  id    String @id @default(uuid()) @db.VarChar(36)
  type  String @unique @db.VarChar(255)
  bands band[] @relation("BandEvents")
}

model equipment {
  id     String @id @default(uuid()) @db.VarChar(36)
  type   String @db.VarChar(255)
  band   band   @relation("BandEquipment", fields: [bandId], references: [id])
  bandId String @db.VarChar(36)
}

model message {
  id          String   @id(map: "message_PK") @db.VarChar(36)
  senderId    String   @db.VarChar(36)
  recipientId String   @db.VarChar(36)
  chatId      String   @db.VarChar(36)
  content     String
  timestamp   DateTime @default(now())
  isRead      Boolean

  chat chat @relation(fields: [chatId], references: [id])
}

model chat {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String   @db.VarChar(36)
  bandId    String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     user      @relation("UserChats", fields: [userId], references: [id], map: "FK_Chat_User", onDelete: NoAction, onUpdate: NoAction)
  band     band      @relation("BandChats", fields: [bandId], references: [id], map: "FK_Chat_Band", onDelete: NoAction, onUpdate: NoAction)
  messages message[]
}

model invitation {
  id        String   @id @default(uuid()) @db.VarChar(36)
  bandId    String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  status    String   @db.VarChar(50)
  createdAt DateTime @default(now())

  band band @relation(fields: [bandId], references: [id], map: "FK_Invitation_Band", onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], map: "FK_Invitation_User", onDelete: Cascade)
}

model booking {
  id        String   @id @default(uuid()) @db.VarChar(36)
  offerId   String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  status    String   @db.VarChar(50)
  date      DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  offer offer @relation(fields: [offerId], references: [id], map: "FK_Booking_Offer", onDelete: Cascade)
  user  user  @relation(fields: [userId], references: [id], map: "FK_Booking_User", onDelete: Cascade)
}

model emailVerification {
  id              String   @id(map: "emailVerification_PK") @db.VarChar(36)
  userId          String   @unique @db.VarChar(36)
  language        String   @db.VarChar(2)
  verified        Boolean  @default(false)
  lastEmailSentAt DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}
