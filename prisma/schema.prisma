generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id          String   @id
  firstName   String
  familyName  String
  email       String   @unique
  role        String
  phoneNumber String?
  nationalId  String?
  password    String?
  imageUrl    String?
  bio         String?
  joinedDate  DateTime @default(now())

  billingAddress    billingAddress?
  paymentMethods    paymentMethod[]
  refreshTokens     refreshToken[]
  memberOf          bandMember[]
  chats             chat[]             @relation("UserChats")
  invitations       invitation[]
  bookings          booking[]
  emailVerification emailVerification?
  artistReview      artistReview[]
}

model paymentMethod {
  id         String   @id @default(uuid())
  userId     String
  provider   String
  providerId String
  type       String
  brand      String?
  alias      String?
  lastFour   String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model billingAddress {
  id           String  @id @default(uuid())
  userId       String  @unique
  country      String
  city         String
  postalCode   String
  addressLine1 String
  addressLine2 String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refreshToken {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model bandMember {
  userId    String
  bandId    String
  role      String
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  band band @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@id([userId, bandId])
}

model band {
  id                 String       @id
  name               String
  musicalStyleIds    String[]
  followers          Int
  following          Int
  createdAt          DateTime
  price              Int
  location           String
  featured           Boolean      @default(false)
  bandSize           String
  visible            Boolean      @default(true)
  eventTypeIds       String[]
  weeklyAvailability Json
  media              media[]
  socialLink         socialLink[]
  technicalRiderId   String       @unique
  hospitalityRiderId String       @unique
  performanceAreaId  String       @unique
  bio                String?
  imageUrl           String?

  members          bandMember[]
  chats            chat[]           @relation("BandChats")
  invitations      invitation[]
  artistReview     artistReview[]
  bookings         booking[]
  technicalRider   technicalRider   @relation(fields: [technicalRiderId], references: [id])
  hospitalityRider hospitalityRider @relation(fields: [hospitalityRiderId], references: [id])
  performanceArea  performanceArea  @relation(fields: [performanceAreaId], references: [id])
}

model media {
  id     String @id @default(uuid())
  bandId String
  url    String
  type   String

  band band @relation(fields: [bandId], references: [id], onDelete: Cascade)
}

model socialLink {
  id       String @id @default(uuid())
  bandId   String
  platform String
  url      String

  band band @relation(fields: [bandId], references: [id], onDelete: Cascade)
}

model artistReview {
  id      String   @id @default(uuid())
  bandId  String
  rating  Int
  comment String
  userId  String
  date    DateTime @default(now())

  band band @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model technicalRider {
  id                String  @id @default(uuid())
  soundSystem       String
  microphones       String
  backline          String
  lighting          String
  otherRequirements String?

  band band? @relation
}

model hospitalityRider {
  id                  String  @id @default(uuid())
  accommodation       String
  catering            String
  beverages           String
  specialRequirements String?

  band band? @relation
}

model performanceArea {
  id                String   @id @default(uuid())
  regions           String[]
  travelPreferences String
  restrictions      String?

  band band? @relation
}

model message {
  id          String   @id
  senderId    String
  recipientId String
  chatId      String
  timestamp   DateTime @default(now())
  isRead      Boolean
  message     String?
  bookingId   String?
  fileUrl     String?

  booking booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  chat    chat     @relation(fields: [chatId], references: [id])
}

model chat {
  id        String   @id @default(uuid())
  userId    String
  bandId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     user      @relation("UserChats", fields: [userId], references: [id])
  band     band      @relation("BandChats", fields: [bandId], references: [id])
  messages message[]
}

model invitation {
  id        String   @id @default(uuid())
  bandId    String
  userId    String
  status    String
  createdAt DateTime @default(now())

  band band @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model booking {
  id           String   @id @default(uuid())
  bandId       String
  userId       String
  status       String
  name         String
  initDate     DateTime
  endDate      DateTime
  country      String
  city         String
  venue        String
  postalCode   String
  addressLine1 String
  eventTypeId  String?
  addressLine2 String?
  isPublic     Boolean?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  band     band      @relation(fields: [bandId], references: [id], onDelete: Cascade)
  user     user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract contract?
  message  message[]
}

model contract {
  id              String   @id @default(uuid())
  bookingId       String   @unique
  status          String
  fileUrl         String
  userSigned      Boolean
  bandSigned      Boolean
  vidsignerDocGui String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  booking booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  invoice invoice?
}

model invoice {
  id         String   @id @default(uuid())
  contractId String   @unique
  amount     Float
  status     String
  fileUrl    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  contract contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model emailVerification {
  id              String   @id
  userId          String   @unique
  language        String
  verified        Boolean  @default(false)
  lastEmailSentAt DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}
